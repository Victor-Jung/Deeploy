name: TestRunnerTiledSiracusaSequential

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      docker-image:
        required: true
        type: string
      tests-config:
        required: true
        type: string
      num-cores:
        required: false
        default: 8
        type: number
      default-memory-level:
        required: false
        default: "L2"
        type: string
      double-buffer:
        required: false
        default: false
        type: boolean
      memory-allocation-strategy:
        required: false
        default: "MiniMalloc"
        type: string
      search-strategy:
        required: false
        default: "random-max"
        type: string

jobs:

  test-runner-siracusa-tiled:
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.docker-image }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Deeploy
        run: pip install -e .
      - name: Install jq
        run: apt-get install -y jq
      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v4
        with:
          path: /app/.ccache
          key: ${{ runner.os }}-ccache
      - name: Run Tests
        run: |
          cd DeeployTest
          echo '${{ inputs.tests-config }}' > tests.json
          mkdir -p /app/.ccache
          export CCACHE_DIR=/app/.ccache

          jq -c '.[]' tests.json | while read test; do
            testName=$(echo "$test" | jq -r '.name')
            L1_values=$(echo "$test" | jq -r '.L1[]')
            for L1_value in $L1_values; do
              echo "Running test: $testName with L1: $L1_value"
              python testRunner_tiled_siracusa.py -t Tests/$testName --cores=${{ inputs.num-cores }} --l1 $L1_value --defaultMemLevel=${{ inputs.default-memory-level }} ${{ inputs.double-buffer && '--doublebuffer' || '' }} --memAllocStrategy=${{ inputs.memory-allocation-strategy }} --searchStrategy=${{ inputs.search-strategy }}
            done
          done
        shell: bash
        