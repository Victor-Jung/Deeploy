########## Stage 1: Large image to build toolchains and emulator ##########
ARG BASE_IMAGE=ghcr.io/pulp-platform/deeploy-toolchain
FROM ${BASE_IMAGE} AS toolchain

# Intermediate Stage
ARG DEBIAN_FRONTEND=noninteractive
ARG BENDER_VERSION=0.28.1
ARG UBUNTU_VERSION=22.04
ARG TARGETPLATFORM

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC
ENV PATH="/root/.cargo/bin:/app/bender:${PATH}"
ENV LLVM_INSTALL_DIR=/app/install/llvm

WORKDIR /app

# Make sure updates in the repo are reflected in the image
COPY toolchain/*.patch toolchain/
COPY Makefile ./
COPY requirements-dev.txt ./

# Compile emulators
RUN apt-get upgrade && \
    apt-get update && \
    apt-get install -y python3.10-venv \
    python3.10-distutils 

RUN --mount=type=cache,target=/ccache \
    ccache -z && \
    make pulp-sdk qemu mempool banshee xtensor && \
    make gvsoc && \
    cp -r /app/toolchain/gvsoc/core/requirements.txt /app/core-requirements.txt && \
    cp -r /app/toolchain/gvsoc/gapy/requirements.txt /app/gapy-requirements.txt && \
    make SOFTHIER_INSTALL_DIR=/app/install/softhier softhier && \
    ccache -s

# Install Bender
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
    wget https://github.com/pulp-platform/bender/releases/download/v${BENDER_VERSION}/bender-${BENDER_VERSION}-x86_64-linux-gnu-ubuntu${UBUNTU_VERSION}.tar.gz && \
    tar xzf bender-${BENDER_VERSION}-x86_64-linux-gnu-ubuntu${UBUNTU_VERSION}.tar.gz && \
    cp  /app/bender /bin; \
elif [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
    wget https://github.com/Xeratec/bender/releases/download/v0.28.3-rc1/bender-0.28.3-rc1-arm64-linux-gnu-ubuntu${UBUNTU_VERSION}.tar.gz && \
    tar xzf bender-0.28.3-rc1-arm64-linux-gnu-ubuntu${UBUNTU_VERSION}.tar.gz && \
    cp  /app/bender /bin; \
fi

# Compile Snitch Runtime
ENV CC="gcc"
ENV CXX="g++"
RUN --mount=type=cache,target=/ccache \
    ccache -z && \
    make snitch_runtime && \
    ccache -s

# Remove toolchain to make the container lighter
RUN rm -rf toolchain

########## Stage 2: Lightweight image with precompiled toolchain and emulators ##########
FROM ubuntu:22.04 AS deeploy

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Export symbols necessary for Deeploy's build flow
ENV CMAKE=/usr/bin/cmake
ENV PULP_SDK_HOME=/app/install/pulp-sdk
ENV LLVM_INSTALL_DIR=/app/install/llvm
ENV SNITCH_HOME=/app/install/snitch_cluster
ENV GVSOC_INSTALL_DIR=/app/install/gvsoc
ENV SOFTHIER_INSTALL_DIR=/app/install/softhier
ENV MINIMALLOC_INSTALL_DIR=/app/install/minimalloc
ENV MEMPOOL_HOME=/app/install/mempool
ENV PATH=/root/.cargo/bin:/app/install/qemu/bin:/app/install/banshee:$PATH

WORKDIR /app

COPY pyproject.toml ./

# Install dependencies
RUN mkdir -p /root/.cargo/bin/ && \
    apt-get update && \
    apt-get install -y git-lfs \
    cmake \
    ccache \
    curl \
    libpixman-1-dev \
    libsdl2-dev \
    python-is-python3 \
    python3.10-venv \
    python3.10-distutils && \
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python get-pip.py && \
    rm get-pip.py && \
    pip install nvidia-pyindex && \
    pip install toml-to-requirements && \
    toml-to-req --toml-file pyproject.toml && \
    pip install -r requirements.txt

COPY --from=toolchain /app/core-requirements.txt ./core-requirements.txt
COPY --from=toolchain /app/gapy-requirements.txt ./gapy-requirements.txt
COPY --from=toolchain /app/requirements-dev.txt ./
RUN pip install -r requirements-dev.txt core-requirements.txt -r gapy-requirements.txt

# Copy pre-built toolchains and emulators
COPY --from=toolchain /app/install ./install
COPY --from=toolchain /root/.cargo/bin/banshee /root/.cargo/bin/banshee